// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service/chat/definition/chat_types.proto

#ifndef PROTOBUF_service_2fchat_2fdefinition_2fchat_5ftypes_2eproto__INCLUDED
#define PROTOBUF_service_2fchat_2fdefinition_2fchat_5ftypes_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "service/channel/channel_types.pb.h"
// @@protoc_insertion_point(includes)

namespace bnet {
namespace protocol {
namespace chat {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_service_2fchat_2fdefinition_2fchat_5ftypes_2eproto();
void protobuf_AssignDesc_service_2fchat_2fdefinition_2fchat_5ftypes_2eproto();
void protobuf_ShutdownFile_service_2fchat_2fdefinition_2fchat_5ftypes_2eproto();

class ChannelState;

// ===================================================================

class ChannelState : public ::google::protobuf::Message {
 public:
  ChannelState();
  virtual ~ChannelState();
  
  ChannelState(const ChannelState& from);
  
  inline ChannelState& operator=(const ChannelState& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelState& default_instance();
  
  void Swap(ChannelState* other);
  
  // implements Message ----------------------------------------------
  
  ChannelState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChannelState& from);
  void MergeFrom(const ChannelState& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string identity = 1;
  inline bool has_identity() const;
  inline void clear_identity();
  static const int kIdentityFieldNumber = 1;
  inline const ::std::string& identity() const;
  inline void set_identity(const ::std::string& value);
  inline void set_identity(const char* value);
  inline void set_identity(const char* value, size_t size);
  inline ::std::string* mutable_identity();
  inline ::std::string* release_identity();
  
  // optional fixed32 program = 2;
  inline bool has_program() const;
  inline void clear_program();
  static const int kProgramFieldNumber = 2;
  inline ::google::protobuf::uint32 program() const;
  inline void set_program(::google::protobuf::uint32 value);
  
  // optional fixed32 locale = 3;
  inline bool has_locale() const;
  inline void clear_locale();
  static const int kLocaleFieldNumber = 3;
  inline ::google::protobuf::uint32 locale() const;
  inline void set_locale(::google::protobuf::uint32 value);
  
  static const int kChatFieldNumber = 100;
  static ::google::protobuf::internal::ExtensionIdentifier< ::bnet::protocol::channel::ChannelState,
      ::google::protobuf::internal::MessageTypeTraits< ::bnet::protocol::chat::ChannelState >, 11, false >
    chat;
  // @@protoc_insertion_point(class_scope:bnet.protocol.chat.ChannelState)
 private:
  inline void set_has_identity();
  inline void clear_has_identity();
  inline void set_has_program();
  inline void clear_has_program();
  inline void set_has_locale();
  inline void clear_has_locale();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* identity_;
  ::google::protobuf::uint32 program_;
  ::google::protobuf::uint32 locale_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_service_2fchat_2fdefinition_2fchat_5ftypes_2eproto();
  friend void protobuf_AssignDesc_service_2fchat_2fdefinition_2fchat_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_service_2fchat_2fdefinition_2fchat_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static ChannelState* default_instance_;
};
// ===================================================================


// ===================================================================

// ChannelState

// optional string identity = 1;
inline bool ChannelState::has_identity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChannelState::set_has_identity() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChannelState::clear_has_identity() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChannelState::clear_identity() {
  if (identity_ != &::google::protobuf::internal::kEmptyString) {
    identity_->clear();
  }
  clear_has_identity();
}
inline const ::std::string& ChannelState::identity() const {
  return *identity_;
}
inline void ChannelState::set_identity(const ::std::string& value) {
  set_has_identity();
  if (identity_ == &::google::protobuf::internal::kEmptyString) {
    identity_ = new ::std::string;
  }
  identity_->assign(value);
}
inline void ChannelState::set_identity(const char* value) {
  set_has_identity();
  if (identity_ == &::google::protobuf::internal::kEmptyString) {
    identity_ = new ::std::string;
  }
  identity_->assign(value);
}
inline void ChannelState::set_identity(const char* value, size_t size) {
  set_has_identity();
  if (identity_ == &::google::protobuf::internal::kEmptyString) {
    identity_ = new ::std::string;
  }
  identity_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChannelState::mutable_identity() {
  set_has_identity();
  if (identity_ == &::google::protobuf::internal::kEmptyString) {
    identity_ = new ::std::string;
  }
  return identity_;
}
inline ::std::string* ChannelState::release_identity() {
  clear_has_identity();
  if (identity_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = identity_;
    identity_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional fixed32 program = 2;
inline bool ChannelState::has_program() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChannelState::set_has_program() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChannelState::clear_has_program() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChannelState::clear_program() {
  program_ = 0u;
  clear_has_program();
}
inline ::google::protobuf::uint32 ChannelState::program() const {
  return program_;
}
inline void ChannelState::set_program(::google::protobuf::uint32 value) {
  set_has_program();
  program_ = value;
}

// optional fixed32 locale = 3;
inline bool ChannelState::has_locale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChannelState::set_has_locale() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChannelState::clear_has_locale() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChannelState::clear_locale() {
  locale_ = 0u;
  clear_has_locale();
}
inline ::google::protobuf::uint32 ChannelState::locale() const {
  return locale_;
}
inline void ChannelState::set_locale(::google::protobuf::uint32 value) {
  set_has_locale();
  locale_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace chat
}  // namespace protocol
}  // namespace bnet

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_service_2fchat_2fdefinition_2fchat_5ftypes_2eproto__INCLUDED
