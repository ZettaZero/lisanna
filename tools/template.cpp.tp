/*
    This file is part of Lisana.

    Lisana is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Lisana is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Lisana.  If not, see <http://www.gnu.org/licenses/>.
*/

// [%  name %]
// [%  fullname %]
//
[% FOREACH method = methods -%]
// { [%	method.name  %] [%	method.request  %] [%	method.response  %] }
[%	END %]

#include "[%  name %].h"

#include <iostream>

using namespace google::protobuf;


CService[%  name %]::CService[%  name %]()
{
	// place here any initialization (?)
}

CService[%  name %]::CService[%  name %](CServiceMgr* owner=0,int SID=0, int sHash=0, std::string serviceName="") : CService(owner,SID, sHash, serviceName)
{
	//what goes here now?
}

Message* CService[%  name %]::GetMethodMessage(int MethodID, bool request) {
	switch (MethodID) {
[% FOREACH method = methods -%]
		case [%	method.id  %]:
			if (request) { return [% method.requests %]::default_instance().New(); }
			else { 
[%- IF method.responsename != "NO_RESPONSE" -%]
return [% method.responses %]::default_instance().New();
[%- ELSE -%]
cerr << "error: method has no response data" << endl;
[%- END -%]
 }
[%	END %]
		default:
			cerr << "error: method not implemented" << endl;
			return NULL;
	}
}

//This function was autogenerated:
bool CService[%  name %]::DispatchMethod(int MethodID, bool request, TCPSocket *sock, apacket* packet) {
	switch (MethodID) {
[% FOREACH method = methods -%]
		case [%	method.id  %]:
			if (request) { return handle_[% method.name %]_Request(sock, packet); }
			else {
[%- IF method.responsename != "NO_RESPONSE" -%]
[%- IF method.response != ".bnet.protocol.NoData" -%]
	return handle_[% method.name %]_Response(sock, packet);
[%- ELSE -%]
	return handle_NoData_[% method.name %](sock, packet);
[%- END -%]
[%- ELSE -%]
cerr << "error: method has no response data" << endl;
[%- END -%]
 }
[%	END %]
		default:
			cerr << "error: method not implemented" << endl;
			return false;
	}
}

[% FOREACH method = methods -%]
bool CService[%  name %]::handle_[%	method.name  %]_Request(TCPSocket *sock, apacket* packet)
{
	[%	method.requests  %]* request;
	[% IF method.responsename != "NO_RESPONSE" %]
	[%-	method.responses  %] response;
	request = ([%	method.requests  %]*) packet;
	
	// add some info to the packet? 

	sendheader(sock, 0xFE, 0, packet->hdr->reqid, 0, response.ByteSize());
	sendmsgdata(sock, &response);
[% ELSE -%]
	//this packet has no response asociated.
[%- END %]
	// do something...
	
	return true;
}

[% IF method.responsename != "NO_RESPONSE" -%]
[% IF method.response != ".bnet.protocol.NoData" -%]
bool CService[%  name %]::handle_[%	method.name  %]_Response(TCPSocket *sock, apacket* packet)
[% ELSE %]
bool CService[%  name %]::handle_NoData_[%	method.name  %](TCPSocket *sock, apacket* packet)
[%- END %]
{
	[%	method.responses  %]* response;
	response = ([%	method.responses  %]*) packet->msg;
	//do something...
	
	return true;
}
[% END %]
[%	END -%]

CService[%  name %]::~CService[%  name %](void)
{
	std::cout << "Bye from authserv.";
}

