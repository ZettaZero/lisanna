/*
    This file is part of Lisana.

    Lisana is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Lisana is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Lisana.  If not, see <http://www.gnu.org/licenses/>.
*/

// ServerPoolService
// bnet.protocol.server_pool.ServerPoolService
//
// { GetPoolState .bnet.protocol.server_pool.PoolStateRequest .bnet.protocol.server_pool.PoolStateResponse }


#include "ServerPoolService.h"

#include <iostream>

using namespace google::protobuf;


CServiceServerPoolService::CServiceServerPoolService()
{
	// place here any initialization (?)
}

CServiceServerPoolService::CServiceServerPoolService(CServiceMgr* owner=0,int SID=0, std::string serviceName=string(SERVICE_ServerPoolService_NAME)) : 
	CService(owner, SID, serviceName)
{
	//what goes here now?
}


Message* CServiceServerPoolService::GetMethodMessage(int MethodID, bool request) {
	switch (MethodID) {
		case 1:
			if (request) { return ::bnet::protocol::server_pool::PoolStateRequest::default_instance().New(); }
			else { return ::bnet::protocol::server_pool::PoolStateResponse::default_instance().New(); }

		default:
			cerr << "error: method not implemented" << endl;
			return NULL;
	}
}

//This function was autogenerated:
bool CServiceServerPoolService::DispatchMethod(int MethodID, bool request, TCPSocket *sock, apacket* packet) {
	switch (MethodID) {
		case 1:
			if (request) { return handle_GetPoolState_Request(sock, packet); }
			else {	return handle_GetPoolState_Response(sock, packet); }

		default:
			cerr << "error: method not implemented" << endl;
			return false;
	}
}

bool CServiceServerPoolService::handle_GetPoolState_Request(TCPSocket *sock, apacket* packet)
{
	::bnet::protocol::server_pool::PoolStateRequest* request;
	::bnet::protocol::server_pool::PoolStateResponse response;
	request = (::bnet::protocol::server_pool::PoolStateRequest*) packet;
	
	// add some info to the packet? 

	sendheader(sock, 0xFE, 0, packet->hdr->reqid, 0, response.ByteSize());
	sendmsgdata(sock, &response);

	// do something...
	
	return true;
}

bool CServiceServerPoolService::handle_GetPoolState_Response(TCPSocket *sock, apacket* packet)

{
	::bnet::protocol::server_pool::PoolStateResponse* response;
	response = (::bnet::protocol::server_pool::PoolStateResponse*) packet->msg;
	//do something...
	
	return true;
}


CServiceServerPoolService::~CServiceServerPoolService(void)
{
	std::cout << "Bye from authserv.";
}

