/*
    This file is part of Lisana.

    Lisana is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Lisana is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Lisana.  If not, see <http://www.gnu.org/licenses/>.
*/

// ChannelOwner
// bnet.protocol.channel.ChannelOwner
//
// { GetChannelId .bnet.protocol.channel.GetChannelIdRequest .bnet.protocol.channel.GetChannelIdResponse }
// { CreateChannel .bnet.protocol.channel.CreateChannelRequest .bnet.protocol.channel.CreateChannelResponse }
// { JoinChannel .bnet.protocol.channel.JoinChannelRequest .bnet.protocol.channel.JoinChannelResponse }
// { FindChannel .bnet.protocol.channel.FindChannelRequest .bnet.protocol.channel.FindChannelResponse }
// { GetChannelInfo .bnet.protocol.channel.GetChannelInfoRequest .bnet.protocol.channel.GetChannelInfoResponse }


#include "ChannelOwner.h"

#include <iostream>

using namespace google::protobuf;


CServiceChannelOwner::CServiceChannelOwner()
{
	// place here any initialization (?)
}

CServiceChannelOwner::CServiceChannelOwner(CServiceMgr* owner=0,int SID=0, std::string serviceName=string(SERVICE_ChannelOwner_NAME)) : 
	CService(owner, SID, serviceName)
{
	//what goes here now?
}


Message* CServiceChannelOwner::GetMethodMessage(int MethodID, bool request) {
	switch (MethodID) {
		case 1:
			if (request) { return ::bnet::protocol::channel::GetChannelIdRequest::default_instance().New(); }
			else { return ::bnet::protocol::channel::GetChannelIdResponse::default_instance().New(); }
		case 2:
			if (request) { return ::bnet::protocol::channel::CreateChannelRequest::default_instance().New(); }
			else { return ::bnet::protocol::channel::CreateChannelResponse::default_instance().New(); }
		case 3:
			if (request) { return ::bnet::protocol::channel::JoinChannelRequest::default_instance().New(); }
			else { return ::bnet::protocol::channel::JoinChannelResponse::default_instance().New(); }
		case 4:
			if (request) { return ::bnet::protocol::channel::FindChannelRequest::default_instance().New(); }
			else { return ::bnet::protocol::channel::FindChannelResponse::default_instance().New(); }
		case 5:
			if (request) { return ::bnet::protocol::channel::GetChannelInfoRequest::default_instance().New(); }
			else { return ::bnet::protocol::channel::GetChannelInfoResponse::default_instance().New(); }

		default:
			cerr << "error: method not implemented" << endl;
			return NULL;
	}
}

//This function was autogenerated:
bool CServiceChannelOwner::DispatchMethod(int MethodID, bool request, TCPSocket *sock, apacket* packet) {
	switch (MethodID) {
		case 1:
			if (request) { return handle_GetChannelId_Request(sock, packet); }
			else {	return handle_GetChannelId_Response(sock, packet); }
		case 2:
			if (request) { return handle_CreateChannel_Request(sock, packet); }
			else {	return handle_CreateChannel_Response(sock, packet); }
		case 3:
			if (request) { return handle_JoinChannel_Request(sock, packet); }
			else {	return handle_JoinChannel_Response(sock, packet); }
		case 4:
			if (request) { return handle_FindChannel_Request(sock, packet); }
			else {	return handle_FindChannel_Response(sock, packet); }
		case 5:
			if (request) { return handle_GetChannelInfo_Request(sock, packet); }
			else {	return handle_GetChannelInfo_Response(sock, packet); }

		default:
			cerr << "error: method not implemented" << endl;
			return false;
	}
}

bool CServiceChannelOwner::handle_GetChannelId_Request(TCPSocket *sock, apacket* packet)
{
	::bnet::protocol::channel::GetChannelIdRequest* request;
	::bnet::protocol::channel::GetChannelIdResponse response;
	request = (::bnet::protocol::channel::GetChannelIdRequest*) packet;
	
	// add some info to the packet? 

	sendheader(sock, 0xFE, 0, packet->hdr->reqid, 0, response.ByteSize());
	sendmsgdata(sock, &response);

	// do something...
	
	return true;
}

bool CServiceChannelOwner::handle_GetChannelId_Response(TCPSocket *sock, apacket* packet)

{
	::bnet::protocol::channel::GetChannelIdResponse* response;
	response = (::bnet::protocol::channel::GetChannelIdResponse*) packet->msg;
	//do something...
	
	return true;
}

bool CServiceChannelOwner::handle_CreateChannel_Request(TCPSocket *sock, apacket* packet)
{
	::bnet::protocol::channel::CreateChannelRequest* request;
	::bnet::protocol::channel::CreateChannelResponse response;
	request = (::bnet::protocol::channel::CreateChannelRequest*) packet;
	
	// add some info to the packet? 

	sendheader(sock, 0xFE, 0, packet->hdr->reqid, 0, response.ByteSize());
	sendmsgdata(sock, &response);

	// do something...
	
	return true;
}

bool CServiceChannelOwner::handle_CreateChannel_Response(TCPSocket *sock, apacket* packet)

{
	::bnet::protocol::channel::CreateChannelResponse* response;
	response = (::bnet::protocol::channel::CreateChannelResponse*) packet->msg;
	//do something...
	
	return true;
}

bool CServiceChannelOwner::handle_JoinChannel_Request(TCPSocket *sock, apacket* packet)
{
	::bnet::protocol::channel::JoinChannelRequest* request;
	::bnet::protocol::channel::JoinChannelResponse response;
	request = (::bnet::protocol::channel::JoinChannelRequest*) packet;
	
	// add some info to the packet? 

	sendheader(sock, 0xFE, 0, packet->hdr->reqid, 0, response.ByteSize());
	sendmsgdata(sock, &response);

	// do something...
	
	return true;
}

bool CServiceChannelOwner::handle_JoinChannel_Response(TCPSocket *sock, apacket* packet)

{
	::bnet::protocol::channel::JoinChannelResponse* response;
	response = (::bnet::protocol::channel::JoinChannelResponse*) packet->msg;
	//do something...
	
	return true;
}

bool CServiceChannelOwner::handle_FindChannel_Request(TCPSocket *sock, apacket* packet)
{
	::bnet::protocol::channel::FindChannelRequest* request;
	::bnet::protocol::channel::FindChannelResponse response;
	request = (::bnet::protocol::channel::FindChannelRequest*) packet;
	
	// add some info to the packet? 

	sendheader(sock, 0xFE, 0, packet->hdr->reqid, 0, response.ByteSize());
	sendmsgdata(sock, &response);

	// do something...
	
	return true;
}

bool CServiceChannelOwner::handle_FindChannel_Response(TCPSocket *sock, apacket* packet)

{
	::bnet::protocol::channel::FindChannelResponse* response;
	response = (::bnet::protocol::channel::FindChannelResponse*) packet->msg;
	//do something...
	
	return true;
}

bool CServiceChannelOwner::handle_GetChannelInfo_Request(TCPSocket *sock, apacket* packet)
{
	::bnet::protocol::channel::GetChannelInfoRequest* request;
	::bnet::protocol::channel::GetChannelInfoResponse response;
	request = (::bnet::protocol::channel::GetChannelInfoRequest*) packet;
	
	// add some info to the packet? 

	sendheader(sock, 0xFE, 0, packet->hdr->reqid, 0, response.ByteSize());
	sendmsgdata(sock, &response);

	// do something...
	
	return true;
}

bool CServiceChannelOwner::handle_GetChannelInfo_Response(TCPSocket *sock, apacket* packet)

{
	::bnet::protocol::channel::GetChannelInfoResponse* response;
	response = (::bnet::protocol::channel::GetChannelInfoResponse*) packet->msg;
	//do something...
	
	return true;
}


CServiceChannelOwner::~CServiceChannelOwner(void)
{
	std::cout << "Bye from authserv.";
}

