/*
    This file is part of Lisana.

    Lisana is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Lisana is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Lisana.  If not, see <http://www.gnu.org/licenses/>.
*/

// ExchangeNotify
// bnet.protocol.exchange.ExchangeNotify
//
// { NotifyOrderBookStatusChange .bnet.protocol.exchange.OrderBookNotificationRequest .bnet.protocol.NO_RESPONSE }
// { NotifyOfferStatusChange .bnet.protocol.exchange.OfferNotificationRequest .bnet.protocol.NO_RESPONSE }
// { NotifyBidStatusChange .bnet.protocol.exchange.BidNotificationRequest .bnet.protocol.NO_RESPONSE }


#include "ExchangeNotify.h"

#include <iostream>

using namespace google::protobuf;


CServiceExchangeNotify::CServiceExchangeNotify()
{
	// place here any initialization (?)
}

CServiceExchangeNotify::CServiceExchangeNotify(CServiceMgr* owner=0,int SID=0, std::string serviceName=string(SERVICE_ExchangeNotify_NAME)) : 
	CService(owner, SID, serviceName)
{
	//what goes here now?
}


Message* CServiceExchangeNotify::GetMethodMessage(int MethodID, bool request) {
	switch (MethodID) {
		case 1:
			if (request) { return ::bnet::protocol::exchange::OrderBookNotificationRequest::default_instance().New(); }
			else { cerr << "error: method has no response data" << endl; }
		case 2:
			if (request) { return ::bnet::protocol::exchange::OfferNotificationRequest::default_instance().New(); }
			else { cerr << "error: method has no response data" << endl; }
		case 3:
			if (request) { return ::bnet::protocol::exchange::BidNotificationRequest::default_instance().New(); }
			else { cerr << "error: method has no response data" << endl; }

		default:
			cerr << "error: method not implemented" << endl;
			return NULL;
	}
}

//This function was autogenerated:
bool CServiceExchangeNotify::DispatchMethod(int MethodID, bool request, TCPSocket *sock, apacket* packet) {
	switch (MethodID) {
		case 1:
			if (request) { return handle_NotifyOrderBookStatusChange_Request(sock, packet); }
			else {cerr << "error: method has no response data" << endl; }
		case 2:
			if (request) { return handle_NotifyOfferStatusChange_Request(sock, packet); }
			else {cerr << "error: method has no response data" << endl; }
		case 3:
			if (request) { return handle_NotifyBidStatusChange_Request(sock, packet); }
			else {cerr << "error: method has no response data" << endl; }

		default:
			cerr << "error: method not implemented" << endl;
			return false;
	}
}

bool CServiceExchangeNotify::handle_NotifyOrderBookStatusChange_Request(TCPSocket *sock, apacket* packet)
{
	::bnet::protocol::exchange::OrderBookNotificationRequest* request;
		//this packet has no response asociated.
	// do something...
	
	return true;
}


bool CServiceExchangeNotify::handle_NotifyOfferStatusChange_Request(TCPSocket *sock, apacket* packet)
{
	::bnet::protocol::exchange::OfferNotificationRequest* request;
		//this packet has no response asociated.
	// do something...
	
	return true;
}


bool CServiceExchangeNotify::handle_NotifyBidStatusChange_Request(TCPSocket *sock, apacket* packet)
{
	::bnet::protocol::exchange::BidNotificationRequest* request;
		//this packet has no response asociated.
	// do something...
	
	return true;
}



CServiceExchangeNotify::~CServiceExchangeNotify(void)
{
	std::cout << "Bye from authserv.";
}

