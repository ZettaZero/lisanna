/*
    This file is part of Lisana.

    Lisana is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Lisana is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Lisana.  If not, see <http://www.gnu.org/licenses/>.
*/

// ToonServiceExternal
// bnet.protocol.toon.external.ToonServiceExternal
//
// { ToonList .bnet.protocol.toon.external.ToonListRequest .bnet.protocol.toon.external.ToonListResponse }
// { SelectToon .bnet.protocol.toon.external.SelectToonRequest .bnet.protocol.toon.external.SelectToonResponse }
// { CreateToon .bnet.protocol.toon.external.CreateToonRequest .bnet.protocol.toon.external.CreateToonResponse }
// { DeleteToon .bnet.protocol.toon.external.DeleteToonRequest .bnet.protocol.toon.external.DeleteToonResponse }


#include "ToonServiceExternal.h"

#include <iostream>

using namespace google::protobuf;


CServiceToonServiceExternal::CServiceToonServiceExternal()
{
	// place here any initialization (?)
}

CServiceToonServiceExternal::CServiceToonServiceExternal(CServiceMgr* owner=0,int SID=0, int sHash=0, std::string serviceName="") : CService(owner,SID, sHash, serviceName)
{
	//what goes here now?
}

Message* CServiceToonServiceExternal::GetMethodMessage(int MethodID, bool request) {
	switch (MethodID) {
		case 1:
			if (request) { return ::bnet::protocol::toon::external::ToonListRequest::default_instance().New(); }
			else { return ::bnet::protocol::toon::external::ToonListResponse::default_instance().New(); }
		case 2:
			if (request) { return ::bnet::protocol::toon::external::SelectToonRequest::default_instance().New(); }
			else { return ::bnet::protocol::toon::external::SelectToonResponse::default_instance().New(); }
		case 3:
			if (request) { return ::bnet::protocol::toon::external::CreateToonRequest::default_instance().New(); }
			else { return ::bnet::protocol::toon::external::CreateToonResponse::default_instance().New(); }
		case 4:
			if (request) { return ::bnet::protocol::toon::external::DeleteToonRequest::default_instance().New(); }
			else { return ::bnet::protocol::toon::external::DeleteToonResponse::default_instance().New(); }

		default:
			cerr << "error: method not implemented" << endl;
			return NULL;
	}
}

//This function was autogenerated:
bool CServiceToonServiceExternal::DispatchMethod(int MethodID, bool request, TCPSocket *sock, apacket* packet) {
	switch (MethodID) {
		case 1:
			if (request) { return handle_ToonList_Request(sock, packet); }
			else {	return handle_ToonList_Response(sock, packet); }
		case 2:
			if (request) { return handle_SelectToon_Request(sock, packet); }
			else {	return handle_SelectToon_Response(sock, packet); }
		case 3:
			if (request) { return handle_CreateToon_Request(sock, packet); }
			else {	return handle_CreateToon_Response(sock, packet); }
		case 4:
			if (request) { return handle_DeleteToon_Request(sock, packet); }
			else {	return handle_DeleteToon_Response(sock, packet); }

		default:
			cerr << "error: method not implemented" << endl;
			return false;
	}
}

bool CServiceToonServiceExternal::handle_ToonList_Request(TCPSocket *sock, apacket* packet)
{
	::bnet::protocol::toon::external::ToonListRequest* request;
	::bnet::protocol::toon::external::ToonListResponse response;
	request = (::bnet::protocol::toon::external::ToonListRequest*) packet;
	
	// add some info to the packet? 

	sendheader(sock, 0xFE, 0, packet->hdr->reqid, 0, response.ByteSize());
	sendmsgdata(sock, &response);

	// do something...
	
	return true;
}

bool CServiceToonServiceExternal::handle_ToonList_Response(TCPSocket *sock, apacket* packet)

{
	::bnet::protocol::toon::external::ToonListResponse* response;
	response = (::bnet::protocol::toon::external::ToonListResponse*) packet->msg;
	//do something...
	
	return true;
}

bool CServiceToonServiceExternal::handle_SelectToon_Request(TCPSocket *sock, apacket* packet)
{
	::bnet::protocol::toon::external::SelectToonRequest* request;
	::bnet::protocol::toon::external::SelectToonResponse response;
	request = (::bnet::protocol::toon::external::SelectToonRequest*) packet;
	
	// add some info to the packet? 

	sendheader(sock, 0xFE, 0, packet->hdr->reqid, 0, response.ByteSize());
	sendmsgdata(sock, &response);

	// do something...
	
	return true;
}

bool CServiceToonServiceExternal::handle_SelectToon_Response(TCPSocket *sock, apacket* packet)

{
	::bnet::protocol::toon::external::SelectToonResponse* response;
	response = (::bnet::protocol::toon::external::SelectToonResponse*) packet->msg;
	//do something...
	
	return true;
}

bool CServiceToonServiceExternal::handle_CreateToon_Request(TCPSocket *sock, apacket* packet)
{
	::bnet::protocol::toon::external::CreateToonRequest* request;
	::bnet::protocol::toon::external::CreateToonResponse response;
	request = (::bnet::protocol::toon::external::CreateToonRequest*) packet;
	
	// add some info to the packet? 

	sendheader(sock, 0xFE, 0, packet->hdr->reqid, 0, response.ByteSize());
	sendmsgdata(sock, &response);

	// do something...
	
	return true;
}

bool CServiceToonServiceExternal::handle_CreateToon_Response(TCPSocket *sock, apacket* packet)

{
	::bnet::protocol::toon::external::CreateToonResponse* response;
	response = (::bnet::protocol::toon::external::CreateToonResponse*) packet->msg;
	//do something...
	
	return true;
}

bool CServiceToonServiceExternal::handle_DeleteToon_Request(TCPSocket *sock, apacket* packet)
{
	::bnet::protocol::toon::external::DeleteToonRequest* request;
	::bnet::protocol::toon::external::DeleteToonResponse response;
	request = (::bnet::protocol::toon::external::DeleteToonRequest*) packet;
	
	// add some info to the packet? 

	sendheader(sock, 0xFE, 0, packet->hdr->reqid, 0, response.ByteSize());
	sendmsgdata(sock, &response);

	// do something...
	
	return true;
}

bool CServiceToonServiceExternal::handle_DeleteToon_Response(TCPSocket *sock, apacket* packet)

{
	::bnet::protocol::toon::external::DeleteToonResponse* response;
	response = (::bnet::protocol::toon::external::DeleteToonResponse*) packet->msg;
	//do something...
	
	return true;
}


CServiceToonServiceExternal::~CServiceToonServiceExternal(void)
{
	std::cout << "Bye from authserv.";
}

