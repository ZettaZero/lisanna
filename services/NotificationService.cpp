/*
    This file is part of Lisana.

    Lisana is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Lisana is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Lisana.  If not, see <http://www.gnu.org/licenses/>.
*/

// NotificationService
// bnet.protocol.notification.NotificationService
//
// { SendNotification .bnet.protocol.notification.Notification .bnet.protocol.NoData }
// { RegisterClient .bnet.protocol.notification.RegisterClientRequest .bnet.protocol.NoData }
// { UnregisterClient .bnet.protocol.notification.UnregisterClientRequest .bnet.protocol.NoData }
// { FindClient .bnet.protocol.notification.FindClientRequest .bnet.protocol.notification.FindClientResponse }


#include "NotificationService.h"

#include <iostream>

using namespace google::protobuf;


CServiceNotificationService::CServiceNotificationService()
{
	// place here any initialization (?)
}

CServiceNotificationService::CServiceNotificationService(CServiceMgr* owner=0,int SID=0, int sHash=0, std::string serviceName="") : CService(owner,SID, sHash, serviceName)
{
	//what goes here now?
}

Message* CServiceNotificationService::GetMethodMessage(int MethodID, bool request) {
	switch (MethodID) {
		case 1:
			if (request) { return ::bnet::protocol::notification::Notification::default_instance().New(); }
			else { return ::bnet::protocol::NoData::default_instance().New(); }
		case 2:
			if (request) { return ::bnet::protocol::notification::RegisterClientRequest::default_instance().New(); }
			else { return ::bnet::protocol::NoData::default_instance().New(); }
		case 3:
			if (request) { return ::bnet::protocol::notification::UnregisterClientRequest::default_instance().New(); }
			else { return ::bnet::protocol::NoData::default_instance().New(); }
		case 4:
			if (request) { return ::bnet::protocol::notification::FindClientRequest::default_instance().New(); }
			else { return ::bnet::protocol::notification::FindClientResponse::default_instance().New(); }

		default:
			cerr << "error: method not implemented" << endl;
			return NULL;
	}
}

//This function was autogenerated:
bool CServiceNotificationService::DispatchMethod(int MethodID, bool request, TCPSocket *sock, apacket* packet) {
	switch (MethodID) {
		case 1:
			if (request) { return handle_SendNotification_Request(sock, packet); }
			else {	return handle_NoData_SendNotification(sock, packet); }
		case 2:
			if (request) { return handle_RegisterClient_Request(sock, packet); }
			else {	return handle_NoData_RegisterClient(sock, packet); }
		case 3:
			if (request) { return handle_UnregisterClient_Request(sock, packet); }
			else {	return handle_NoData_UnregisterClient(sock, packet); }
		case 4:
			if (request) { return handle_FindClient_Request(sock, packet); }
			else {	return handle_FindClient_Response(sock, packet); }

		default:
			cerr << "error: method not implemented" << endl;
			return false;
	}
}

bool CServiceNotificationService::handle_SendNotification_Request(TCPSocket *sock, apacket* packet)
{
	::bnet::protocol::notification::Notification* request;
	::bnet::protocol::NoData response;
	request = (::bnet::protocol::notification::Notification*) packet;
	
	// add some info to the packet? 

	sendheader(sock, 0xFE, 0, packet->hdr->reqid, 0, response.ByteSize());
	sendmsgdata(sock, &response);

	// do something...
	
	return true;
}


bool CServiceNotificationService::handle_NoData_SendNotification(TCPSocket *sock, apacket* packet)
{
	::bnet::protocol::NoData* response;
	response = (::bnet::protocol::NoData*) packet->msg;
	//do something...
	
	return true;
}

bool CServiceNotificationService::handle_RegisterClient_Request(TCPSocket *sock, apacket* packet)
{
	::bnet::protocol::notification::RegisterClientRequest* request;
	::bnet::protocol::NoData response;
	request = (::bnet::protocol::notification::RegisterClientRequest*) packet;
	
	// add some info to the packet? 

	sendheader(sock, 0xFE, 0, packet->hdr->reqid, 0, response.ByteSize());
	sendmsgdata(sock, &response);

	// do something...
	
	return true;
}


bool CServiceNotificationService::handle_NoData_RegisterClient(TCPSocket *sock, apacket* packet)
{
	::bnet::protocol::NoData* response;
	response = (::bnet::protocol::NoData*) packet->msg;
	//do something...
	
	return true;
}

bool CServiceNotificationService::handle_UnregisterClient_Request(TCPSocket *sock, apacket* packet)
{
	::bnet::protocol::notification::UnregisterClientRequest* request;
	::bnet::protocol::NoData response;
	request = (::bnet::protocol::notification::UnregisterClientRequest*) packet;
	
	// add some info to the packet? 

	sendheader(sock, 0xFE, 0, packet->hdr->reqid, 0, response.ByteSize());
	sendmsgdata(sock, &response);

	// do something...
	
	return true;
}


bool CServiceNotificationService::handle_NoData_UnregisterClient(TCPSocket *sock, apacket* packet)
{
	::bnet::protocol::NoData* response;
	response = (::bnet::protocol::NoData*) packet->msg;
	//do something...
	
	return true;
}

bool CServiceNotificationService::handle_FindClient_Request(TCPSocket *sock, apacket* packet)
{
	::bnet::protocol::notification::FindClientRequest* request;
	::bnet::protocol::notification::FindClientResponse response;
	request = (::bnet::protocol::notification::FindClientRequest*) packet;
	
	// add some info to the packet? 

	sendheader(sock, 0xFE, 0, packet->hdr->reqid, 0, response.ByteSize());
	sendmsgdata(sock, &response);

	// do something...
	
	return true;
}

bool CServiceNotificationService::handle_FindClient_Response(TCPSocket *sock, apacket* packet)

{
	::bnet::protocol::notification::FindClientResponse* response;
	response = (::bnet::protocol::notification::FindClientResponse*) packet->msg;
	//do something...
	
	return true;
}


CServiceNotificationService::~CServiceNotificationService(void)
{
	std::cout << "Bye from authserv.";
}

