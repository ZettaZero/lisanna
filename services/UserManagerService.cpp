/*
    This file is part of Lisana.

    Lisana is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Lisana is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Lisana.  If not, see <http://www.gnu.org/licenses/>.
*/

// UserManagerService
// bnet.protocol.user_manager.UserManagerService
//
// { SubscribeToUserManager .bnet.protocol.user_manager.SubscribeToUserManagerRequest .bnet.protocol.user_manager.SubscribeToUserManagerResponse }
// { ReportPlayer .bnet.protocol.user_manager.ReportPlayerRequest .bnet.protocol.user_manager.ReportPlayerResponse }
// { BlockPlayer .bnet.protocol.user_manager.BlockPlayerRequest .bnet.protocol.user_manager.BlockPlayerResponse }
// { RemovePlayerBlock .bnet.protocol.user_manager.RemovePlayerBlockRequest .bnet.protocol.user_manager.RemovePlayerBlockResponse }
// { AddRecentPlayers .bnet.protocol.user_manager.AddRecentPlayersRequest .bnet.protocol.user_manager.AddRecentPlayersResponse }
// { RemoveRecentPlayers .bnet.protocol.user_manager.RemoveRecentPlayersRequest .bnet.protocol.user_manager.RemoveRecentPlayersResponse }


#include "UserManagerService.h"

#include <iostream>

using namespace google::protobuf;


CServiceUserManagerService::CServiceUserManagerService()
{
	// place here any initialization (?)
}

CServiceUserManagerService::CServiceUserManagerService(CServiceMgr* owner=0,int SID=0, int sHash=0, std::string serviceName="") : CService(owner,SID, sHash, serviceName)
{
	//what goes here now?
}

Message* CServiceUserManagerService::GetMethodMessage(int MethodID, bool request) {
	switch (MethodID) {
		case 1:
			if (request) { return ::bnet::protocol::user_manager::SubscribeToUserManagerRequest::default_instance().New(); }
			else { return ::bnet::protocol::user_manager::SubscribeToUserManagerResponse::default_instance().New(); }
		case 2:
			if (request) { return ::bnet::protocol::user_manager::ReportPlayerRequest::default_instance().New(); }
			else { return ::bnet::protocol::user_manager::ReportPlayerResponse::default_instance().New(); }
		case 3:
			if (request) { return ::bnet::protocol::user_manager::BlockPlayerRequest::default_instance().New(); }
			else { return ::bnet::protocol::user_manager::BlockPlayerResponse::default_instance().New(); }
		case 4:
			if (request) { return ::bnet::protocol::user_manager::RemovePlayerBlockRequest::default_instance().New(); }
			else { return ::bnet::protocol::user_manager::RemovePlayerBlockResponse::default_instance().New(); }
		case 5:
			if (request) { return ::bnet::protocol::user_manager::AddRecentPlayersRequest::default_instance().New(); }
			else { return ::bnet::protocol::user_manager::AddRecentPlayersResponse::default_instance().New(); }
		case 6:
			if (request) { return ::bnet::protocol::user_manager::RemoveRecentPlayersRequest::default_instance().New(); }
			else { return ::bnet::protocol::user_manager::RemoveRecentPlayersResponse::default_instance().New(); }

		default:
			cerr << "error: method not implemented" << endl;
			return NULL;
	}
}

//This function was autogenerated:
bool CServiceUserManagerService::DispatchMethod(int MethodID, bool request, TCPSocket *sock, apacket* packet) {
	switch (MethodID) {
		case 1:
			if (request) { return handle_SubscribeToUserManager_Request(sock, packet); }
			else {	return handle_SubscribeToUserManager_Response(sock, packet); }
		case 2:
			if (request) { return handle_ReportPlayer_Request(sock, packet); }
			else {	return handle_ReportPlayer_Response(sock, packet); }
		case 3:
			if (request) { return handle_BlockPlayer_Request(sock, packet); }
			else {	return handle_BlockPlayer_Response(sock, packet); }
		case 4:
			if (request) { return handle_RemovePlayerBlock_Request(sock, packet); }
			else {	return handle_RemovePlayerBlock_Response(sock, packet); }
		case 5:
			if (request) { return handle_AddRecentPlayers_Request(sock, packet); }
			else {	return handle_AddRecentPlayers_Response(sock, packet); }
		case 6:
			if (request) { return handle_RemoveRecentPlayers_Request(sock, packet); }
			else {	return handle_RemoveRecentPlayers_Response(sock, packet); }

		default:
			cerr << "error: method not implemented" << endl;
			return false;
	}
}

bool CServiceUserManagerService::handle_SubscribeToUserManager_Request(TCPSocket *sock, apacket* packet)
{
	::bnet::protocol::user_manager::SubscribeToUserManagerRequest* request;
	::bnet::protocol::user_manager::SubscribeToUserManagerResponse response;
	request = (::bnet::protocol::user_manager::SubscribeToUserManagerRequest*) packet;
	
	// add some info to the packet? 

	sendheader(sock, 0xFE, 0, packet->hdr->reqid, 0, response.ByteSize());
	sendmsgdata(sock, &response);

	// do something...
	
	return true;
}

bool CServiceUserManagerService::handle_SubscribeToUserManager_Response(TCPSocket *sock, apacket* packet)

{
	::bnet::protocol::user_manager::SubscribeToUserManagerResponse* response;
	response = (::bnet::protocol::user_manager::SubscribeToUserManagerResponse*) packet->msg;
	//do something...
	
	return true;
}

bool CServiceUserManagerService::handle_ReportPlayer_Request(TCPSocket *sock, apacket* packet)
{
	::bnet::protocol::user_manager::ReportPlayerRequest* request;
	::bnet::protocol::user_manager::ReportPlayerResponse response;
	request = (::bnet::protocol::user_manager::ReportPlayerRequest*) packet;
	
	// add some info to the packet? 

	sendheader(sock, 0xFE, 0, packet->hdr->reqid, 0, response.ByteSize());
	sendmsgdata(sock, &response);

	// do something...
	
	return true;
}

bool CServiceUserManagerService::handle_ReportPlayer_Response(TCPSocket *sock, apacket* packet)

{
	::bnet::protocol::user_manager::ReportPlayerResponse* response;
	response = (::bnet::protocol::user_manager::ReportPlayerResponse*) packet->msg;
	//do something...
	
	return true;
}

bool CServiceUserManagerService::handle_BlockPlayer_Request(TCPSocket *sock, apacket* packet)
{
	::bnet::protocol::user_manager::BlockPlayerRequest* request;
	::bnet::protocol::user_manager::BlockPlayerResponse response;
	request = (::bnet::protocol::user_manager::BlockPlayerRequest*) packet;
	
	// add some info to the packet? 

	sendheader(sock, 0xFE, 0, packet->hdr->reqid, 0, response.ByteSize());
	sendmsgdata(sock, &response);

	// do something...
	
	return true;
}

bool CServiceUserManagerService::handle_BlockPlayer_Response(TCPSocket *sock, apacket* packet)

{
	::bnet::protocol::user_manager::BlockPlayerResponse* response;
	response = (::bnet::protocol::user_manager::BlockPlayerResponse*) packet->msg;
	//do something...
	
	return true;
}

bool CServiceUserManagerService::handle_RemovePlayerBlock_Request(TCPSocket *sock, apacket* packet)
{
	::bnet::protocol::user_manager::RemovePlayerBlockRequest* request;
	::bnet::protocol::user_manager::RemovePlayerBlockResponse response;
	request = (::bnet::protocol::user_manager::RemovePlayerBlockRequest*) packet;
	
	// add some info to the packet? 

	sendheader(sock, 0xFE, 0, packet->hdr->reqid, 0, response.ByteSize());
	sendmsgdata(sock, &response);

	// do something...
	
	return true;
}

bool CServiceUserManagerService::handle_RemovePlayerBlock_Response(TCPSocket *sock, apacket* packet)

{
	::bnet::protocol::user_manager::RemovePlayerBlockResponse* response;
	response = (::bnet::protocol::user_manager::RemovePlayerBlockResponse*) packet->msg;
	//do something...
	
	return true;
}

bool CServiceUserManagerService::handle_AddRecentPlayers_Request(TCPSocket *sock, apacket* packet)
{
	::bnet::protocol::user_manager::AddRecentPlayersRequest* request;
	::bnet::protocol::user_manager::AddRecentPlayersResponse response;
	request = (::bnet::protocol::user_manager::AddRecentPlayersRequest*) packet;
	
	// add some info to the packet? 

	sendheader(sock, 0xFE, 0, packet->hdr->reqid, 0, response.ByteSize());
	sendmsgdata(sock, &response);

	// do something...
	
	return true;
}

bool CServiceUserManagerService::handle_AddRecentPlayers_Response(TCPSocket *sock, apacket* packet)

{
	::bnet::protocol::user_manager::AddRecentPlayersResponse* response;
	response = (::bnet::protocol::user_manager::AddRecentPlayersResponse*) packet->msg;
	//do something...
	
	return true;
}

bool CServiceUserManagerService::handle_RemoveRecentPlayers_Request(TCPSocket *sock, apacket* packet)
{
	::bnet::protocol::user_manager::RemoveRecentPlayersRequest* request;
	::bnet::protocol::user_manager::RemoveRecentPlayersResponse response;
	request = (::bnet::protocol::user_manager::RemoveRecentPlayersRequest*) packet;
	
	// add some info to the packet? 

	sendheader(sock, 0xFE, 0, packet->hdr->reqid, 0, response.ByteSize());
	sendmsgdata(sock, &response);

	// do something...
	
	return true;
}

bool CServiceUserManagerService::handle_RemoveRecentPlayers_Response(TCPSocket *sock, apacket* packet)

{
	::bnet::protocol::user_manager::RemoveRecentPlayersResponse* response;
	response = (::bnet::protocol::user_manager::RemoveRecentPlayersResponse*) packet->msg;
	//do something...
	
	return true;
}


CServiceUserManagerService::~CServiceUserManagerService(void)
{
	std::cout << "Bye from authserv.";
}

