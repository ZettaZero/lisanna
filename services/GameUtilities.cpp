/*
    This file is part of Lisana.

    Lisana is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Lisana is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Lisana.  If not, see <http://www.gnu.org/licenses/>.
*/

// GameUtilities
// bnet.protocol.game_utilities.GameUtilities
//
// { ProcessClientRequest .bnet.protocol.game_utilities.ClientRequest .bnet.protocol.game_utilities.ClientResponse }
// { CreateToon .bnet.protocol.game_utilities.CreateToonRequest .bnet.protocol.game_utilities.CreateToonResponse }
// { DeleteToon .bnet.protocol.game_utilities.DeleteToonRequest .bnet.protocol.NoData }
// { TransferToon .bnet.protocol.game_utilities.TransferToonRequest .bnet.protocol.NoData }
// { SelectToon .bnet.protocol.game_utilities.SelectToonRequest .bnet.protocol.NoData }
// { PresenceChannelCreated .bnet.protocol.game_utilities.PresenceChannelCreatedRequest .bnet.protocol.NoData }
// { GetPlayerVariables .bnet.protocol.game_utilities.PlayerVariablesRequest .bnet.protocol.game_utilities.VariablesResponse }
// { GetGameVariables .bnet.protocol.game_utilities.GameVariablesRequest .bnet.protocol.game_utilities.VariablesResponse }
// { GetLoad .bnet.protocol.server_pool.GetLoadRequest .bnet.protocol.server_pool.ServerState }


#include "GameUtilities.h"

#include <iostream>

using namespace google::protobuf;


CServiceGameUtilities::CServiceGameUtilities()
{
	// place here any initialization (?)
}

CServiceGameUtilities::CServiceGameUtilities(CServiceMgr* owner=0,int SID=0, std::string serviceName=string(SERVICE_GameUtilities_NAME)) : 
	CService(owner, SID, serviceName)
{
	//what goes here now?
}


Message* CServiceGameUtilities::GetMethodMessage(int MethodID, bool request) {
	switch (MethodID) {
		case 1:
			if (request) { return ::bnet::protocol::game_utilities::ClientRequest::default_instance().New(); }
			else { return ::bnet::protocol::game_utilities::ClientResponse::default_instance().New(); }
		case 2:
			if (request) { return ::bnet::protocol::game_utilities::CreateToonRequest::default_instance().New(); }
			else { return ::bnet::protocol::game_utilities::CreateToonResponse::default_instance().New(); }
		case 3:
			if (request) { return ::bnet::protocol::game_utilities::DeleteToonRequest::default_instance().New(); }
			else { return ::bnet::protocol::NoData::default_instance().New(); }
		case 4:
			if (request) { return ::bnet::protocol::game_utilities::TransferToonRequest::default_instance().New(); }
			else { return ::bnet::protocol::NoData::default_instance().New(); }
		case 5:
			if (request) { return ::bnet::protocol::game_utilities::SelectToonRequest::default_instance().New(); }
			else { return ::bnet::protocol::NoData::default_instance().New(); }
		case 6:
			if (request) { return ::bnet::protocol::game_utilities::PresenceChannelCreatedRequest::default_instance().New(); }
			else { return ::bnet::protocol::NoData::default_instance().New(); }
		case 7:
			if (request) { return ::bnet::protocol::game_utilities::PlayerVariablesRequest::default_instance().New(); }
			else { return ::bnet::protocol::game_utilities::VariablesResponse::default_instance().New(); }
		case 8:
			if (request) { return ::bnet::protocol::game_utilities::GameVariablesRequest::default_instance().New(); }
			else { return ::bnet::protocol::game_utilities::VariablesResponse::default_instance().New(); }
		case 9:
			if (request) { return ::bnet::protocol::server_pool::GetLoadRequest::default_instance().New(); }
			else { return ::bnet::protocol::server_pool::ServerState::default_instance().New(); }

		default:
			cerr << "error: method not implemented" << endl;
			return NULL;
	}
}

//This function was autogenerated:
bool CServiceGameUtilities::DispatchMethod(int MethodID, bool request, TCPSocket *sock, apacket* packet) {
	switch (MethodID) {
		case 1:
			if (request) { return handle_ProcessClientRequest_Request(sock, packet); }
			else {	return handle_ProcessClientRequest_Response(sock, packet); }
		case 2:
			if (request) { return handle_CreateToon_Request(sock, packet); }
			else {	return handle_CreateToon_Response(sock, packet); }
		case 3:
			if (request) { return handle_DeleteToon_Request(sock, packet); }
			else {	return handle_NoData_DeleteToon(sock, packet); }
		case 4:
			if (request) { return handle_TransferToon_Request(sock, packet); }
			else {	return handle_NoData_TransferToon(sock, packet); }
		case 5:
			if (request) { return handle_SelectToon_Request(sock, packet); }
			else {	return handle_NoData_SelectToon(sock, packet); }
		case 6:
			if (request) { return handle_PresenceChannelCreated_Request(sock, packet); }
			else {	return handle_NoData_PresenceChannelCreated(sock, packet); }
		case 7:
			if (request) { return handle_GetPlayerVariables_Request(sock, packet); }
			else {	return handle_GetPlayerVariables_Response(sock, packet); }
		case 8:
			if (request) { return handle_GetGameVariables_Request(sock, packet); }
			else {	return handle_GetGameVariables_Response(sock, packet); }
		case 9:
			if (request) { return handle_GetLoad_Request(sock, packet); }
			else {	return handle_GetLoad_Response(sock, packet); }

		default:
			cerr << "error: method not implemented" << endl;
			return false;
	}
}

bool CServiceGameUtilities::handle_ProcessClientRequest_Request(TCPSocket *sock, apacket* packet)
{
	::bnet::protocol::game_utilities::ClientRequest* request;
	::bnet::protocol::game_utilities::ClientResponse response;
	request = (::bnet::protocol::game_utilities::ClientRequest*) packet;
	
	// add some info to the packet? 

	sendheader(sock, 0xFE, 0, packet->hdr->reqid, 0, response.ByteSize());
	sendmsgdata(sock, &response);

	// do something...
	
	return true;
}

bool CServiceGameUtilities::handle_ProcessClientRequest_Response(TCPSocket *sock, apacket* packet)

{
	::bnet::protocol::game_utilities::ClientResponse* response;
	response = (::bnet::protocol::game_utilities::ClientResponse*) packet->msg;
	//do something...
	
	return true;
}

bool CServiceGameUtilities::handle_CreateToon_Request(TCPSocket *sock, apacket* packet)
{
	::bnet::protocol::game_utilities::CreateToonRequest* request;
	::bnet::protocol::game_utilities::CreateToonResponse response;
	request = (::bnet::protocol::game_utilities::CreateToonRequest*) packet;
	
	// add some info to the packet? 

	sendheader(sock, 0xFE, 0, packet->hdr->reqid, 0, response.ByteSize());
	sendmsgdata(sock, &response);

	// do something...
	
	return true;
}

bool CServiceGameUtilities::handle_CreateToon_Response(TCPSocket *sock, apacket* packet)

{
	::bnet::protocol::game_utilities::CreateToonResponse* response;
	response = (::bnet::protocol::game_utilities::CreateToonResponse*) packet->msg;
	//do something...
	
	return true;
}

bool CServiceGameUtilities::handle_DeleteToon_Request(TCPSocket *sock, apacket* packet)
{
	::bnet::protocol::game_utilities::DeleteToonRequest* request;
	::bnet::protocol::NoData response;
	request = (::bnet::protocol::game_utilities::DeleteToonRequest*) packet;
	
	// add some info to the packet? 

	sendheader(sock, 0xFE, 0, packet->hdr->reqid, 0, response.ByteSize());
	sendmsgdata(sock, &response);

	// do something...
	
	return true;
}


bool CServiceGameUtilities::handle_NoData_DeleteToon(TCPSocket *sock, apacket* packet)
{
	::bnet::protocol::NoData* response;
	response = (::bnet::protocol::NoData*) packet->msg;
	//do something...
	
	return true;
}

bool CServiceGameUtilities::handle_TransferToon_Request(TCPSocket *sock, apacket* packet)
{
	::bnet::protocol::game_utilities::TransferToonRequest* request;
	::bnet::protocol::NoData response;
	request = (::bnet::protocol::game_utilities::TransferToonRequest*) packet;
	
	// add some info to the packet? 

	sendheader(sock, 0xFE, 0, packet->hdr->reqid, 0, response.ByteSize());
	sendmsgdata(sock, &response);

	// do something...
	
	return true;
}


bool CServiceGameUtilities::handle_NoData_TransferToon(TCPSocket *sock, apacket* packet)
{
	::bnet::protocol::NoData* response;
	response = (::bnet::protocol::NoData*) packet->msg;
	//do something...
	
	return true;
}

bool CServiceGameUtilities::handle_SelectToon_Request(TCPSocket *sock, apacket* packet)
{
	::bnet::protocol::game_utilities::SelectToonRequest* request;
	::bnet::protocol::NoData response;
	request = (::bnet::protocol::game_utilities::SelectToonRequest*) packet;
	
	// add some info to the packet? 

	sendheader(sock, 0xFE, 0, packet->hdr->reqid, 0, response.ByteSize());
	sendmsgdata(sock, &response);

	// do something...
	
	return true;
}


bool CServiceGameUtilities::handle_NoData_SelectToon(TCPSocket *sock, apacket* packet)
{
	::bnet::protocol::NoData* response;
	response = (::bnet::protocol::NoData*) packet->msg;
	//do something...
	
	return true;
}

bool CServiceGameUtilities::handle_PresenceChannelCreated_Request(TCPSocket *sock, apacket* packet)
{
	::bnet::protocol::game_utilities::PresenceChannelCreatedRequest* request;
	::bnet::protocol::NoData response;
	request = (::bnet::protocol::game_utilities::PresenceChannelCreatedRequest*) packet;
	
	// add some info to the packet? 

	sendheader(sock, 0xFE, 0, packet->hdr->reqid, 0, response.ByteSize());
	sendmsgdata(sock, &response);

	// do something...
	
	return true;
}


bool CServiceGameUtilities::handle_NoData_PresenceChannelCreated(TCPSocket *sock, apacket* packet)
{
	::bnet::protocol::NoData* response;
	response = (::bnet::protocol::NoData*) packet->msg;
	//do something...
	
	return true;
}

bool CServiceGameUtilities::handle_GetPlayerVariables_Request(TCPSocket *sock, apacket* packet)
{
	::bnet::protocol::game_utilities::PlayerVariablesRequest* request;
	::bnet::protocol::game_utilities::VariablesResponse response;
	request = (::bnet::protocol::game_utilities::PlayerVariablesRequest*) packet;
	
	// add some info to the packet? 

	sendheader(sock, 0xFE, 0, packet->hdr->reqid, 0, response.ByteSize());
	sendmsgdata(sock, &response);

	// do something...
	
	return true;
}

bool CServiceGameUtilities::handle_GetPlayerVariables_Response(TCPSocket *sock, apacket* packet)

{
	::bnet::protocol::game_utilities::VariablesResponse* response;
	response = (::bnet::protocol::game_utilities::VariablesResponse*) packet->msg;
	//do something...
	
	return true;
}

bool CServiceGameUtilities::handle_GetGameVariables_Request(TCPSocket *sock, apacket* packet)
{
	::bnet::protocol::game_utilities::GameVariablesRequest* request;
	::bnet::protocol::game_utilities::VariablesResponse response;
	request = (::bnet::protocol::game_utilities::GameVariablesRequest*) packet;
	
	// add some info to the packet? 

	sendheader(sock, 0xFE, 0, packet->hdr->reqid, 0, response.ByteSize());
	sendmsgdata(sock, &response);

	// do something...
	
	return true;
}

bool CServiceGameUtilities::handle_GetGameVariables_Response(TCPSocket *sock, apacket* packet)

{
	::bnet::protocol::game_utilities::VariablesResponse* response;
	response = (::bnet::protocol::game_utilities::VariablesResponse*) packet->msg;
	//do something...
	
	return true;
}

bool CServiceGameUtilities::handle_GetLoad_Request(TCPSocket *sock, apacket* packet)
{
	::bnet::protocol::server_pool::GetLoadRequest* request;
	::bnet::protocol::server_pool::ServerState response;
	request = (::bnet::protocol::server_pool::GetLoadRequest*) packet;
	
	// add some info to the packet? 

	sendheader(sock, 0xFE, 0, packet->hdr->reqid, 0, response.ByteSize());
	sendmsgdata(sock, &response);

	// do something...
	
	return true;
}

bool CServiceGameUtilities::handle_GetLoad_Response(TCPSocket *sock, apacket* packet)

{
	::bnet::protocol::server_pool::ServerState* response;
	response = (::bnet::protocol::server_pool::ServerState*) packet->msg;
	//do something...
	
	return true;
}


CServiceGameUtilities::~CServiceGameUtilities(void)
{
	std::cout << "Bye from authserv.";
}

